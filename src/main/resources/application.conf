akka {
  loglevel = DEBUG
  stdout-loglevel = INFO
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  test {
    timefactor = 1
  }

  http.server.remote-address-header = "on"
}

starchat {
  dispatcher {
    # Dispatcher is the name of the event-based dispatcher
    type = Dispatcher
    # What kind of ExecutionService to use
    executor = "fork-join-executor"
    # Configuration for the fork join pool
    fork-join-executor {
      # Min number of threads to cap factor-based parallelism number to
      parallelism-min = 8
      # Parallelism (threads) ... ceil(available processors * factor)
      parallelism-factor = 3.0
      # Max number of threads to cap factor-based parallelism number to
      parallelism-max = 64
    }
    # Throughput defines the maximum number of messages to be
    # processed per actor before the thread jumps to the next actor.
    # Set to 1 for as fair as possible.
    throughput = 5
  }

  blocking-dispatcher {
    type = Dispatcher
    executor = "thread-pool-executor"
    thread-pool-executor {
      fixed-pool-size = 4
    }
    throughput = 2
  }

  auth_method = "basic_http"
  auth_credential_store = "es"
  auth_realm = "starchat"
  basic_http_es {
    admin = "admin"
    password = "ce822ea3bd2ac45ed908f0fac0c81d95df7e59ad554ebed5e173113f5fb97a6c585803233136dd6b16b02742f50dd8cff6fac97ff827394e694f63198618e02c"
    salt = "salt2"
  }

  https {
    host = "0.0.0.0"
    host = ${?HOST}
    port = 8443
    port = ${?PORT}
    certificates {
      pkcs12 {
        keystore = "/tls/certs/server/keystore.p12"
        password = "uma7KnKwvh"
      }
      jks {
        keystore = "/tls/certs/server/keystore.jks"
        password = "uma7KnKwvh"
      }
      format = "pkcs12"
    }
    enable = true
  }

  http {
    host = "0.0.0.0"
    host = ${?HOST}
    port = 8888
    port = ${?PORT}
    enable = true
  }

  client {
    https {
      certificates {
        pkcs12 {
          keystore = "/tls/certs/client/keystore.p12"
          password = "N7WQdx20"
        }
        jks {
          keystore = "/tls/certs/client/keystore.jks"
          password = "N7WQdx20"
        }
        format = "pkcs12"
      }
      disable_host_validation = true
    }
  }

  actions {
    SendEmailGJ {
      enabled: false
      username: "username"
      password: "p4ssw0rd"
      host: "smtp.gmail.com"
      port: 587
      from: "user@domain.com"
    }
  }

  get_next_response_threshold = 0.0

  clean_deleted_dt_states_process_interval = 1800000 // 1/2 hour
  clean_deleted_dt_states_age = 14400000 // 4 hours

  atom-values {
    http-atom {
      default-timeout = 10
      weather {
        url = "https://api.openweathermap.org/data/2.5/weather"
        http-method = "GET"
        authorization-type = "apiKey"
        store-to = "query"
        key = "APPID"
        token = "<secret token>"
        input-query-template = "q=<location>&units=metric"
      }
      parsedate {
        url = "<service url>"
        http-method = "POST"
        input-content-type = "application/json"
        authorization-type = "apiKey"
        store-to = "header"
        key = "key"
        token = "<secret token>"
        input-json = """{"text": "<query>", "languages": ["<language>"], "settings": {"TIMEZONE": "<timezone>", "DATE_ORDER": "DMY"}}"""
      }
      parsename {
        url = "http://localhost:8000/nameparser/firstnames"
        http-method = "POST"
        input-content-type = "application/json"
        authorization-type = "apiKey"
        store-to = "header"
        key = "key"
        token = "supersecret"
        input-json = """{"text": "<query>"}"""
      }
      entity-extractor {
        url = "http://localhost:8000/entities"
        http-method = "POST"
        input-content-type = "application/json"
        authorization-type = "apiKey"
        store-to = "header"
        key = "key"
        token = "supersecret"
        input-json = """{"text": "<query>", "language": "<language>", "entity_types": ["<entity_type>"]}"""
      }
      readS3Data {
        url = "https://retrieve-data-atomic.s3.eu-west-1.amazonaws.com/<s3-folder-id>/<item-id>"
        http-method = "GET"
      }
      zendeskSearchTickets {
        http-method = "GET"
        url = "https://<zendesk-domain>.zendesk.com/api/v2/search.json"
        store-to = "query"
        input-query-template = "query=requester:<user-email> type:ticket"
      }
      zendeskTicketComments {
        http-method = "GET"
        url = "https://<zendesk-domain>.zendesk.com/api/v2/tickets/<ticket-id>/comments.json"
      }
      readSheetsProductsByName {
        url = "http://localhost:8080/getProducts"
        http-method = "POST"
        input-content-type = "application/json"
        authorization-type = "apiKey"
        store-to = "header"
        key = "key"
        token = "supersecret"
      }
      readSheetsProductsByFeature {
        url = "http://localhost:8080/findProducts"
        http-method = "POST"
        input-content-type = "application/json"
        authotization-type = "apiKey"
        store-to = "header"
        key = "key"
        token = "supersecret"
        input-json = """{"where":"<productFeature.where>", "what": "<productFeature.what>", "material": "<productFeature.material>", "age": "<productFeature.age>", "previous_treatment": "<productFeature.previousTreatment>", "desired_treatment": "<productFeature.desiredTreatment>"}"""
      }
      lt-customer-info {
        http-method = "GET"
        url = "<lt-api-url>/DocumentStore/Customer/v1/api/CustomerInfo/<query>"
        authorization-type = "bearer"
        store-to = "header"
        token = "supersecret"
      }
      ltCustomerWorksiteNo {
        http-method = "GET"
        url = "<lt-worksite-url>/tcs3/api/interface/workorder/futureordersbycustomerboid/<ltCustomerInfo.worksiteNo>"
        authorization-type = "bearer"
        store-to = "header"
        token = "supersecret"
      }
      http-search {
        url = "http://localhost:5000/getVector"
        http-method = "POST"
        input-content-type = "application/json"
        authorization-type = "apiKey"
        store-to = "header"
        key = "key"
        token = "supersecret"
        input-json = """{"query": "<query>"}"""
      }
    }
  }
}

es {
  system_idx_number_of_shards = 2
  system_idx_number_of_replicas = 2
  state_idx_number_of_shards = 2
  state_idx_number_of_replicas = 1
  kb_idx_number_of_shards = 5
  kb_idx_number_of_replicas = 1
  logs_data_idx_number_of_shards = 5
  logs_data_idx_number_of_replicas = 1
  prior_data_idx_number_of_shards = 5
  prior_data_idx_number_of_replicas = 1
  term_idx_number_of_shards = 5
  term_idx_number_of_shards = 1
  auto_initialize_system_index = false
  system_index_name = "starchat_system_0"
  system_instance_registry_suffix = "instance_registry"
  common_index_default_org_pattern = "getjenny"
  common_index_arbitrary_pattern = "common_0"
  logs_data_index_suffix = "logs_data"
  prior_data_index_suffix = "prior_data"
  kb_index_suffix = "question_answer"
  dt_index_suffix = "state"
  user_index_suffix = "user"
  term_index_suffix = "term"
  dt_query_min_threshold = 0.0
  dt_boost_exact_match_factor = 1000.0
  dt_reload_check_frequency = 2 // the frequency to check if the analyzers needs to be reloaded, -1 to disable
  instance_registry_delete_frequency = 10 // frequency to run job to delete instances marked for deletion
  cluster_node_alive_max_interval = 180 // if the node does not update the alive record for N seconds is considered dead
  cluster_node_alive_sig_interval = 120 // set the alive record for the node every N seconds
  cluster_node_clean_dead_interval = 240 // clean non-alive records every N seconds
  cluster_clean_dt_loading_records_interval = 86400 // clean dt loading records for dead nodes
  dt_max_tables = 10000 // max decision tables to keep in memory, 0 means no lmitation
  dt_queries_score_mode = "max" // score mode for queries on DT other possible values are min, avg, total
  qa_query_min_threshold = 0.0
  qa_nested_score_mode = "total" // score mode for Q/A on KB other possible values are max, min, avg
  qa_question_negative_minimum_match = "80%"
  qa_question_negative_boost = 2.0f
  qa_question_exact_match_boost = 1000.0
  clean_visitor_message_cron_interval = 72000
  dictSizeCacheMaxSize = 1000
  totalTermsCacheMaxSize = 1000
  countTermCacheMaxSize = 100000
  cacheStealTimeMillis = 43200000
  cluster_name = "starchat"
  ignore_cluster_name = true
  enable_sniff = false
  enable_delete_application_index = true
  enable_delete_system_index = true
  host_proto = "https"
  authentication = "ZWxhc3RpYzpyUmw0Q0NFUGpZZ2s5YWd3" //"elastic:rRl4CCEPjYgk9agw"
  host_map = "0.0.0.0=9200" // format is: host=port;host2=port2
}
